{"version":3,"file":"component---src-pages-admin-ui-sdk-extension-points-index-md-89c5a4ee5637675c6a87.js","mappings":"qQAMMA,EAAc,CAAC,EACfC,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAHgC,WACjCC,GAED,EADIC,GAAK,YAER,OAAO,SAACJ,GAAS,UAAKD,EAAiBK,EAAK,CAAED,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,gDACH,iDACL,kBAAK,qJACL,eACE,GAAM,mBACH,oBACL,kBAAK,QAAM,uBAAYC,WAAW,KAAM,iBAA8B,kLACtE,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eACV,8HAOP,kBAAK,uCAAqC,uBAAYA,WAAW,KAAM,wBAAqC,iBAAe,uBAAYA,WAAW,KAAM,iBAA8B,6CAA2C,uBAAYA,WAAW,KAAM,eAA4B,uDAAqD,uBAAYA,WAAW,KAAM,4BAAyC,WACrZ,qBAAK,iBAAMA,WAAW,MAClB,UAAa,eACV,mWAgBX,CAEAJ,EAAWK,gBAAiB,C","sources":["webpack://commerce-extensibility/./src/pages/admin-ui-sdk/extension-points/index.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-extensibility/commerce-extensibility/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nconst layoutProps = {};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"adobe-commerce-admin-ui-sdk-extension-points\"\n    }}>{`Adobe Commerce Admin UI SDK extension points`}</h1>\n    <p>{`This section describes how to use existing extension points in any Adobe Developer App Builder application that customizes Adobe Commerce Admin.`}</p>\n    <h2 {...{\n      \"id\": \"shared-contexts\"\n    }}>{`Shared contexts`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`sharedContext`}</inlineCode>{` constant contains a set of selected IDs, the Commerce base URL, and an IMS token, as shown below. It is available only when a mass action is selected in the Commerce Admin.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const sharedContext = {\n  selectedIds: array,\n  commerceBaseUrl: string,\n  imsToken: string,\n  clientId: string\n}\n`}</code></pre>\n    <p>{`In the following code example, the `}<inlineCode parentName=\"p\">{`getGuestConnection()`}</inlineCode>{` call uses a `}<inlineCode parentName=\"p\">{`sharedContext`}</inlineCode>{` to retrieve a list of selected IDs. The `}<inlineCode parentName=\"p\">{`extensionId`}</inlineCode>{` must match the ID used to register the app in the `}<inlineCode parentName=\"p\">{`ExtensionRegistration.js`}</inlineCode>{` file.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const getGuestConnection = async () => {\n    return await attach({\n        id: extensionId\n   })\n}\n    \ngetGuestConnection().then((guestConnection) => {\n  guestConnection.sharedContext.get('selectedIds')\n})\n\nThe \\`path\\` parameter for a \\`productMassAction\\` specifies where to redirect the mass action UI.\n\n\nexport const _frontmatter = {}\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}