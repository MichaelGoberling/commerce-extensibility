{"version":3,"file":"component---src-pages-events-custom-event-fields-md-9f00b8f13e8fa5abcbb4.js","mappings":"0NAOsBA,E,wEADTC,EAAe,CAAC,EAKvBC,GAJgBF,EAIY,cAJJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,EAClB,GAEMG,EAAc,CAClBL,aAAAA,GAEIM,EAAYC,EAAAA,EACH,SAASC,EAAW,GAGhC,IAFDC,EAAU,EAAVA,WACGP,GAAK,YAER,OAAO,SAACI,GAAS,UAAKD,EAAiBH,EAAK,CAAEO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,iCAA+B,kCAEvC,2cACA,SAACT,EAAW,CAACU,QAAQ,OAAOC,MAAM,OAAOF,QAAQ,iBACjD,oDAAqC,uBAAYG,WAAW,KAAG,iBAA+B,sEAAsE,uBAAYA,WAAW,KAAG,cAA4B,qCAC1N,eACE,GAAM,mCAAiC,kBACpB,uBAAYA,WAAW,MAAI,iBAA+B,UAC/E,0BAAW,uBAAYA,WAAW,KAAG,gBAA8B,wHAAwH,uBAAYA,WAAW,KAAG,eAA6B,2DAClP,uBACE,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,MAAI,cAEf,eAAIA,WAAW,KACb,MAAS,MAAI,aAEf,eAAIA,WAAW,KACb,MAAS,MAAI,kBAInB,kBAAOA,WAAW,UAChB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,OACR,uBAAYA,WAAW,MAAI,WAC9B,eAAIA,WAAW,KACb,MAAS,MAAI,QAEf,eAAIA,WAAW,KACb,MAAS,MAAI,qCAGjB,eAAIA,WAAW,UACb,eAAIA,WAAW,KACb,MAAS,OACR,uBAAYA,WAAW,MAAI,cAC9B,eAAIA,WAAW,KACb,MAAS,MAAI,OAEf,eAAIA,WAAW,KACb,MAAS,MAAI,gQAKrB,qDAAsC,uBAAYA,WAAW,KAAG,gBAA8B,MAAM,uBAAYA,WAAW,KAAG,YAA0B,UAAU,uBAAYA,WAAW,KAAG,iBAA+B,mBAAmB,uBAAYA,WAAW,KAAG,mCAAiD,iCAAiC,uBAAYA,WAAW,KAAG,YAA0B,6EAC9Y,oBACE,eAAIA,WAAW,MAAI,6BACnB,eAAIA,WAAW,MAAI,8BACnB,eAAIA,WAAW,MAAI,0BAErB,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBAAc,iyBAgB/B,0EACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,iBAAe,+OAYhC,eACE,GAAM,yBAAuB,0BAE/B,yDAA0C,uBAAYA,WAAW,KAAG,+BAA6C,kCAAkC,uBAAYA,WAAW,KAAG,WAAyB,yEACtM,mBAAG,uBAAYA,WAAW,KAAG,oEAC7B,mFACA,oDAAqC,uBAAYA,WAAW,KAAG,4BAA0C,oBAAoB,uBAAYA,WAAW,KAAG,gBAA8B,8BAA8B,uBAAYA,WAAW,KAAG,aAA2B,YACxQ,qBAAK,iBAAMA,WAAW,MAClB,UAAa,gBAAc,4gBAuBnC,CAEAL,EAAWM,gBAAiB,C","sources":["webpack://commerce-extensibility/./src/pages/events/custom-event-fields.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/commerce-extensibility/commerce-extensibility/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"add-custom-fields-to-an-event\"\n    }}>{`Add custom fields to an event`}</h1>\n    <p>{`Your custom module might generate data that would be useful to insert into an existing Commerce event. Processors allow you to enrich the data contained in an event before it is transmitted to the eventing service. You can optionally assign a priority to each processor. The priority is important in cases when changes from one processor can affect the logic of another processor, or when processors add a new element with the same key.`}</p>\n    <InlineAlert variant=\"info\" slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You must configure a module's `}<inlineCode parentName=\"p\">{`io_events.xml`}</inlineCode>{` file to add custom fields. You cannot declare them in the system `}<inlineCode parentName=\"p\">{`config.php`}</inlineCode>{` file or add them using the CLI.`}</p>\n    <h2 {...{\n      \"id\": \"configure-the-io_eventsxml-file\"\n    }}>{`Configure the `}<inlineCode parentName=\"h2\">{`io_events.xml`}</inlineCode>{` file`}</h2>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<processors>`}</inlineCode>{` element defines the processors that inject custom data into the specified event. This element contains one or more `}<inlineCode parentName=\"p\">{`<processor>`}</inlineCode>{` elements, which can contain the following attributes:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Attribute`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Required`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`class`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Yes`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`The fully-qualified class name.`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`priority`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`An integer indicating the order in which multiple processors are executed. The system executes unprioritized processors first, in the order listed. All processors with defined priority values are executed in numerical order, from lowest to highest.`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`The following example adds the `}<inlineCode parentName=\"p\">{`order_status`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`order_id`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`order_details`}</inlineCode>{` fields to the `}<inlineCode parentName=\"p\">{`observer.sales_order_save_after`}</inlineCode>{` event payload. The assigned `}<inlineCode parentName=\"p\">{`priority`}</inlineCode>{` values indicate the processors will be executed in the following order:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`TestProcessorOrderStatus`}</li>\n      <li parentName=\"ol\">{`TestProcessorOrderDetails`}</li>\n      <li parentName=\"ol\">{`TestProcessorOrderId`}</li>\n    </ol>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-xml\"\n      }}>{`<config xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:noNamespaceSchemaLocation=\"urn:magento:module-commerce-events-client/etc/io_events.xsd\">\n    <event name=\"observer.sales_order_save_after\">\n        <fields>\n            <field name=\"entity_id\" />\n            <field name=\"base_currency_code\" />\n            <field name=\"shipping_method\" />\n        </fields>\n        <processors>\n            <processor class=\"Magento\\\\AdobeCommerceEventsClient\\\\Event\\\\TestProcessorOrderStatus\" priority=\"10\"/>\n            <processor class=\"Magento\\\\AdobeCommerceEventsClient\\\\Event\\\\TestProcessorOrderId\" priority=\"30\"/>\n            <processor class=\"Magento\\\\AdobeCommerceEventsClient\\\\Event\\\\TestProcessorOrderDetails\" priority=\"20\"/>\n        </processors>\n    </event>\n</config>\n`}</code></pre>\n    <p>{`The event payload will be similar to the following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"value\": {\n       \"entity_id\": \"3\",\n       \"base_currency_code\": \"USD\",\n       \"shipping_method\": \"tablerate_bestway\",\n       \"order_status\": \"1\", \n       \"order_details\": \"test details\",\n       \"order_id\": \"3\"\n  }\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"processor-definitions\"\n    }}>{`Processor definitions`}</h2>\n    <p>{`The processor class must implement `}<inlineCode parentName=\"p\">{`EventDataProcessorInterface`}</inlineCode>{`. This interface contains the `}<inlineCode parentName=\"p\">{`process`}</inlineCode>{` method, which accepts the following arguments. It returns an array.`}</p>\n    <p><inlineCode parentName=\"p\">{`public function process(Event $event, array $eventData): array`}</inlineCode></p>\n    <p>{`You must create a separate class for each field to be added.`}</p>\n    <p>{`In the following example, the `}<inlineCode parentName=\"p\">{`TestProcessorOrderStatus`}</inlineCode>{` class adds the `}<inlineCode parentName=\"p\">{`order_status`}</inlineCode>{` field and a value to the `}<inlineCode parentName=\"p\">{`eventData`}</inlineCode>{` array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-php\"\n      }}>{`<?php\n/**\n * Copyright &copy; Magento, Inc. All rights reserved.\n * See COPYING.txt for license details.\n */\ndeclare(strict_types=1);\n​\nnamespace Magento\\\\AdobeCommerceEventsClient\\\\Event;\n​\nuse Magento\\\\AdobeCommerceEventsClient\\\\Event\\\\Processor\\\\EventDataProcessorInterface;\n​\nclass TestProcessorOrderStatus implements EventDataProcessorInterface\n{\n    public function process(Event $event, array $eventData): array\n    {\n        $eventData['order_status'] = 1;\n        return $eventData;\n    }\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","variant","slots","parentName","isMDXComponent"],"sourceRoot":""}